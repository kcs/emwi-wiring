$version 10.00

$rect <10,0,210,40>
inline HAL_Includes
{
  #include <stm32f7xx_hal.h>


}

$rect <10,50,210,90>
$output false
class Core
{
  // Internal functions.
  // Do not use outside the class.
  note group noteInternal
  {
    attr Bounds = <710,360,1010,560>;
  }

  // Internal variables.
  note group noteInternal1
  {
    attr Bounds = <10,360,690,560>;
  }

  $rect <30,400,230,440>
  var Wiring::PinsClass pins = Wiring::Pins;

  // Core Wiring functions
  note group noteCore
  {
    attr Bounds = <10,10,690,350>;
  }

  // This method sets (aState = true) or resets (aState = false) a digital output \
  // pin on the Arduino connector.
  // Pins are identified by their pin number, digital pins 0 to 15, analog pins 16-21.
  $rect <20,100,220,140>
  method void digitalWrite( arg int32 aPin, arg bool aState )
  {
    // get the corresponding pin
    var Wiring::Pin pin = pins.Pin( aPin );
    // and set pin state based on aState
    // false = LOW
    // true = HIGH
    if ( pin != null )
      pin.State = aState ? Wiring::PinState.HIGH : Wiring::PinState.LOW;

  }

  // This method configures a pin from the Arduino connector.
  // Pins are identified by their pin number, digital pins 0 to 15, analog pins 16-21.
  // Possible modes:
  // Wiring::PinModes.INPUT - simple digital input
  // Wiring::PinModes.INPUT_PULLUP - simple digital input with internal pullup enabled
  // Wiring::PinModes.INPUT_PULLDOWN - simple digital input with internal pulldown \
  // enabled
  // Wiring::PinModes.OUTPUT - simple digital output in push-pull mode
  // Wiring::PinModes.OUTPUT_OD - simple digital output in open-drain mode
  // Wiring::PinModes.ANALOG_INPUT - analog (ADC) input mode
  $rect <20,60,220,100>
  method void pinMode( arg int32 aPin, arg Wiring::PinModes aMode )
  {
    var Wiring::Pin pin = pins.Pin( aPin );
    if ( pin != null )
    {
      pin.Mode = aMode;
    }
  }

  // This method reads the state of a digital input pin on the Arduino connector.
  // Pins are identified by their pin number, digital pins 0 to 15, analog pins 16-21.
  // Returns true if the pin is high, false if low.
  $rect <20,140,220,180>
  method bool digitalRead( arg int32 aPin )
  {
    // get the corresponding pin
    var Wiring::Pin pin = pins.Pin( aPin );
    // and set pin state based on aState
    // false = LOW
    // true = HIGH
    if ( pin != null )
      return pin.State == Wiring::PinState.HIGH;

    // if pin is not connected, always return false
    return false;

  }

  // This function sets the resolution for any further analog reads. Resolution in \
  // specified in the number of bits (between 1 and 32).
  // If the hardware does not support the given resolution then a lower resolution \
  // will be used on the actual read and then upscaled to the requested resolution.
  $rect <20,210,220,250>
  method void analogReadResolution( arg int32 aResolution )
  {
    /* this is just a wrapper for compatibility purposes 
       the EmWi way is to use the corresponding property */
    AnalogReadResolution = aResolution;

  }

  $rect <30,440,230,480>
  var uint32 adc_resolution = 0;

  // Core Wiring properties
  note group noteCore1
  {
    attr Bounds = <710,10,930,350>;
  }

  $rect <720,210,920,250>
  property int32 AnalogReadResolution;

  $rect <720,250,920,290>
  onset AnalogReadResolution
  {
    // make sure it is within range
    if ( value < 1 )
      value = 1;
    if ( value > 32 )
      value = 32;

    // The value doesn't change - nothing to do.
    if ( pure AnalogReadResolution == value )
      return;

    // Remember the property's new value.
    pure AnalogReadResolution = value;

    // also configure the adc_resolution
    selectADCResolution( value );


  }

  $rect <720,440,920,480>
  method void selectADCResolution( arg int32 aRes )
  {
    // this function will select the best suited ADC resolution available on the underlying hardware
    var uint32 res = 0; // store the underlying configuration
    var int32 corr = 0; // correction factor to be used when converting to the requested resolution

    native ( res, corr, aRes )
    {
    #ifdef ADC_RESOLUTION_6B
      if ( aRes <= 6 )
      {
        res = ADC_RESOLUTION_6B;
        corr = aRes - 6;
      }
      else
    #endif
    #ifdef ADC_RESOLUTION_8B
      if ( aRes <= 8 )
      {
        res = ADC_RESOLUTION_8B;
        corr = aRes - 8;
      }
      else
    #endif
    #ifdef ADC_RESOLUTION_10B
      if ( aRes <= 10 )
      {
        res = ADC_RESOLUTION_10B;
        corr = aRes - 10;
      }
      else
    #endif
    #ifdef ADC_RESOLUTION_12B
      if ( aRes <= 12 )
      {
        res = ADC_RESOLUTION_12B;
        corr = aRes - 12;
      }
      else
    #endif
    #ifdef ADC_RESOLUTION_14B
      if ( aRes <= 14 )
      {
        res = ADC_RESOLUTION_14B;
        corr = aRes - 14;
      }
      else
    #endif
    #ifdef ADC_RESOLUTION_16B
      if ( aRes <= 16 )
      {
        res = ADC_RESOLUTION_16B;
        corr = aRes - 16;
      }
      else
    #endif
      {
        res = 0;
    #if defined(ADC_RESOLUTION_6B) && !ADC_RESOLUTION_6B
        corr = aRes - 6;
    #elif defined(ADC_RESOLUTION_8B) && !ADC_RESOLUTION_8B
        corr = aRes - 8;
    #elif defined(ADC_RESOLUTION_10B) && !ADC_RESOLUTION_10B
        corr = aRes - 10;
    #elif defined(ADC_RESOLUTION_12B) && !ADC_RESOLUTION_12B
        corr = aRes - 12;
    #elif defined(ADC_RESOLUTION_14B) && !ADC_RESOLUTION_14B
        corr = aRes - 14;
    #elif defined(ADC_RESOLUTION_16B) && !ADC_RESOLUTION_16B
        corr = aRes - 16;
    #endif
      }
    } 
            
    adc_resolution = res;
    adc_correction = corr;

  }

  $rect <30,480,230,520>
  var int32 adc_correction = 0;

  // Read the ADC conversion result from an analog input pin. Sampling will not work \
  // if pin is not configured correctly.
  $rect <19,251,219,291>
  method uint32 analogRead( arg int32 aPin )
  {
    // find the ADC needed
    var Wiring::Adc adc = pins.Adc( aPin );
    if ( adc == null )
    {
      return 0;
    }

    // perform a single conversion
    var uint16 a = adc.ReadAdcValue( adc_resolution );

    // and correct for the requested resolution
    if ( adc_correction == 0 )
    {
      return (uint32)a;
    }
    else if ( adc_correction > 0 )
    {
      // make a skewed bit shifting, so 0 will end up always 0, and MAX-1 will always end up with all bits of 1
      return (((uint32)a + 1) << adc_correction ) - 1;
    }
    else
    {
      if ( a < ( 1 << -adc_correction ))
        return 0;
      return (((uint32)a + 1) >> -adc_correction ) - 1;
    }
  }

  // This function returns a random 32 bit unsigned integer.
  // Opposed to normal Arduino functions, this function will return a true random \
  // number
  // instead of a pseudo-random number. While Arduino function where devised for
  // AVR microcontrollers and needed a standard C++ implementation for a random number
  // and could me made random by using a randomSeed from an unconnected analog pin,
  // the STM32F746 has a built-in true random number generator, so it is much more
  // handy to use it for generating better random numbers.
  // 
  // If pseudo-random numbers are really needed, the standard chora math_rand function
  // can be used instead of the Wiring unit.
  $rect <250,60,450,100>
  method uint32 random()
  {
    // create a RandomNumberGenerator class on the first run
    // this way if random numbers are not needed, the RNG hardware will not
    // get initialized
    if ( rng == null )
      rng = new Wiring::RandomNumberGenerator;

    return rng.GenerateRandomNumber();

  }

  $rect <250,400,450,440>
  var Wiring::RandomNumberGenerator rng = null;

  // Write an analog value to the output. Output can be either a DAC (usually not \
  // available on Arduino header) or a PWM output.
  $rect <20,290,220,330>
  method uint32 analogWrite( arg int32 aPin, arg int32 aValue )
  {
    // ToDo
  }

  // This function remaps a number from one range to another range. Input number \
  // aX is remapped from range (aInFrom .. aInTo) into range (aOutFrom .. aOutTo).
  // Remapping is done solely with integer computations so especially in tight ranges \
  // it can introduce some rather high errors.
  // 
  // The utility of this function is very low, anyone could do better with just plain \
  // old linear equations, but for some onknown reason it is
  // quite popular among Arduino developers (probably because they tend to not really \
  // know what they are doing), so it is also inserted into this module.
  $rect <250,250,450,290>
  method int32 map( arg int32 aX, arg int32 aInFrom, arg int32 aInTo, arg int32 aOutFrom, arg int32 aOutTo )
  {
    /* just the very same function as described in arduino manual */
    return (aX - aInFrom) * (aOutTo - aOutFrom) / (aInTo - aInFrom) + aOutFrom;

  }
}

$rect <220,50,420,90>
$output false
enum PinModes
{
  // Not connected pin
  $rect <10,190,210,230>
  item NC = 0;

  // Input mode
  $rect <10,40,210,80>
  item INPUT;

  // Input mode with pullup enabled
  $rect <210,40,410,80>
  item INPUT_PULLUP;

  // Input mode with pulldown enabled
  $rect <410,40,610,80>
  item INPUT_PULLDOWN;

  // Analog input mode
  $rect <610,40,810,80>
  item INPUT_ANALOG;

  // Push-pull output mode
  $rect <10,80,210,120>
  item OUTPUT;

  // Open-drain output mode
  $rect <210,80,410,120>
  item OUTPUT_OD;

  // Alternate function of the pin. Should not be used directly, but through the \
  // corresponding peripheral library.
  $rect <260,190,510,230>
  item ALTERNATE_FUNCTION;

  // Alternate function of the pin. Should not be used directly, but through the \
  // corresponding peripheral library.
  $rect <560,190,810,230>
  item ALTERNATE_FUNCTION_OD;

  // Mode selection for pins
  note group Note
  {
    attr Bounds = <0,0,820,130>;
  }

  // Internal settings. Should not be used directly
  note group Note1
  {
    attr Bounds = <0,150,820,240>;
  }
}

$rect <430,50,630,90>
$output false
class Pin
{
  $rect <0,160,200,200>
  var handle port = null;

  $rect <0,200,200,240>
  var uint16 pin = 0;

  // Attaches this class to a specific pin. Used only in the Board specific initialization \
  // variant.
  $rect <200,160,400,200>
  method void attach( arg Wiring::Port aPort, arg uint32 aPin )
  {
    // avoid warnings in prototyper
    $if $prototyper
      aPort;
      aPin;
    $endif

    $if !$prototyper
    var handle h;
    native (h, aPort)
    {
      switch ( aPort )
      {
        case WiringPortA:
          h = (XHandle)GPIOA;
          __HAL_RCC_GPIOA_CLK_ENABLE();
          break;
        case WiringPortB:
          h = (XHandle)GPIOB;
          __HAL_RCC_GPIOB_CLK_ENABLE();
          break;
        case WiringPortC:
          h = (XHandle)GPIOC;
          __HAL_RCC_GPIOC_CLK_ENABLE();
          break;
        case WiringPortD:
          h = (XHandle)GPIOD;
          __HAL_RCC_GPIOD_CLK_ENABLE();
          break;
        case WiringPortE:
          h = (XHandle)GPIOE;
          __HAL_RCC_GPIOE_CLK_ENABLE();
          break;
        case WiringPortF:
          h = (XHandle)GPIOF;
          __HAL_RCC_GPIOF_CLK_ENABLE();
          break;
        case WiringPortG:
          h = (XHandle)GPIOG;
          __HAL_RCC_GPIOG_CLK_ENABLE();
          break;
        case WiringPortH:
          h = (XHandle)GPIOH;
          __HAL_RCC_GPIOH_CLK_ENABLE();
          break;
        case WiringPortI:
          h = (XHandle)GPIOI;
          __HAL_RCC_GPIOI_CLK_ENABLE();
          break;
        case WiringPortJ:
          h = (XHandle)GPIOJ;
          __HAL_RCC_GPIOJ_CLK_ENABLE();
          break;
        case WiringPortK:
          h = (XHandle)GPIOK;
          __HAL_RCC_GPIOK_CLK_ENABLE();
          break;
        default:
          h = 0;
      }
    }
    port = h;
    $endif

    pin = (uint16)(1 << aPin);

  }

  $rect <0,0,200,40>
  property Wiring::PinModes Mode;

  $rect <0,40,200,80>
  onset Mode
  {
    // The value doesn't change - nothing to do.
    if ( pure Mode == value )
      return;

    // if old mode was alternate function, then also unconnect the attached device
    if ( ( pure Mode == Wiring::PinModes.ALTERNATE_FUNCTION ||
           pure Mode == Wiring::PinModes.ALTERNATE_FUNCTION_OD ) &&
           value != Wiring::PinModes.ALTERNATE_FUNCTION &&
           value != Wiring::PinModes.ALTERNATE_FUNCTION_OD &&
           AlternateConnected != null )
    {
      AlternateConnected^ = false;
      AlternateConnected = null;
    }

    // Remember the property's new value.
    pure Mode = value;

    // if pin is attached to a hardware pin, apply the settings
    $if !$prototyper
    if ( port != null )
    {
      var handle h = port;
      var uint16 i = pin;
      var uint32 mode = 0;
      var uint32 pull = 0;
      switch ( value )
      {
        case Wiring::PinModes.INPUT_PULLUP: pull = 1;
        case Wiring::PinModes.INPUT_PULLDOWN: pull = 2;
        case Wiring::PinModes.OUTPUT: mode = 1;
        case Wiring::PinModes.OUTPUT_OD: mode = 0x11;
        case Wiring::PinModes.INPUT_ANALOG:
          native ( mode )
          {
            mode = GPIO_MODE_ANALOG;
          }
        case Wiring::PinModes.ALTERNATE_FUNCTION:
          native ( mode )
          {
            mode = GPIO_MODE_AF_PP;
          }
        case Wiring::PinModes.ALTERNATE_FUNCTION_OD:
          native ( mode )
          {
            mode = GPIO_MODE_AF_OD;
          }
        default: ;
      }

      native ( h, i, mode, pull )
      {
        GPIO_InitTypeDef init;

        /* initialize pin */
        init.Pin = i;
        init.Mode = mode;
        init.Pull = pull;
        init.Speed = GPIO_SPEED_HIGH;
        HAL_GPIO_Init( (GPIO_TypeDef *)h, &init );
      }
    }



    $endif
  }

  $rect <200,0,400,40>
  property Wiring::PinState State;

  $rect <200,40,400,80>
  onset State
  {
    // The value doesn't change - nothing to do.
    if ( pure State == value )
      return;

    // Remember the property's new value.
    pure State = value;

    // set the corresponding state to the underlying hardware
    $if !$prototyper
    if ( port != null && value != Wiring::PinState.UNDEFINED && ( pure Mode == Wiring::PinModes.OUTPUT || pure Mode == Wiring::PinModes.OUTPUT_OD ))
    {
      var bool state = value == Wiring::PinState.HIGH;
      var handle h = port;
      var uint16 p = pin;
      native ( h, p, state )
      {
        HAL_GPIO_WritePin( (GPIO_TypeDef *)h, p, (GPIO_PinState)state);
      }
    }
    $endif

  }

  $rect <200,80,400,120>
  onget State
  {
    $if $prototyper
    return pure State;
    $endif

    $if !$prototyper
    // in inpput mode read directly from the the pin
    if ( pure Mode == Wiring::PinModes.INPUT ||
         pure Mode == Wiring::PinModes.INPUT_PULLUP ||
         pure Mode == Wiring::PinModes.INPUT_PULLDOWN )
    {
      var bool state;
      var handle h = port;
      var uint16 p = pin;
      native (state, h, p)
      {
        state = (XBool)HAL_GPIO_ReadPin((GPIO_TypeDef *)h, p);
      }
      return state ? Wiring::PinState.HIGH : Wiring::PinState.LOW;
    }
    else
    {
      return pure State;
    }
    $endif
  }

  $rect <400,200,600,240>
  property ^bool AlternateConnected;

  $rect <400,160,600,200>
  method void SetAlternateFunction( arg Wiring::PinModes aMode, arg int32 aAlternate, arg ^bool aOutlet )
  {
    // alternate functions are either Alternate or Alternate_OpenDrain mode
    if ( aMode != Wiring::PinModes.ALTERNATE_FUNCTION && aMode != Wiring::PinModes.ALTERNATE_FUNCTION_OD )
      return;

    // set mode  directly to outlet, and call the native function directly by specifying the alternate function as well
    pure Mode = aMode;

    $if !$prototyper
      var bool od = aMode == Wiring::PinModes.ALTERNATE_FUNCTION_OD;
      var uint16 i = pin;
      var handle p = port;
      native ( aAlternate, od, p, i )
      {
        GPIO_InitTypeDef init;

        /* initialize pin */
        init.Pin = i;
        init.Mode = od ? GPIO_MODE_AF_OD : GPIO_MODE_AF_PP;
        init.Pull = GPIO_NOPULL;
        init.Alternate = aAlternate;
        init.Speed = GPIO_SPEED_HIGH;
        HAL_GPIO_Init( (GPIO_TypeDef *)p, &init );
      }
    $endif

    AlternateConnected = aOutlet;

  }
}

$rect <220,130,420,170>
$output false
enum Port
{
  $rect <10,10,210,50>
  item A;

  $rect <10,50,210,90>
  item B;

  $rect <10,90,210,130>
  item C;

  $rect <10,130,210,170>
  item D;

  $rect <10,170,210,210>
  item E;

  $rect <10,210,210,250>
  item F;

  $rect <10,250,210,290>
  item G;

  $rect <10,290,210,330>
  item H;

  $rect <10,330,210,370>
  item I;

  $rect <10,370,210,410>
  item J;

  $rect <10,410,210,450>
  item K;
}

$rect <430,90,630,130>
$output false
class PinsClass
{
  // This method will return a Pin object corresponding to the given pin number.
  $rect <0,0,200,40>
  method Wiring::Pin Pin( arg int32 aPin )
  {
    /* this should be overwritten in the board specific variant */
    aPin;
    throw "Unimplemented base class method";

  }

  // This method return the ADC channel associated with the pin. If there is no ADC \
  // channel on the requested pin, null is returned.
  $rect <0,40,200,80>
  method Wiring::Adc Adc( arg int32 aPin )
  {
    /* this should be overwritten in the board specific variant */
    aPin;
    throw "Unimplemented base class method";

  }

  // This method return the I2C peripheral associated with the pins aSDA and aSCL. \
  // If there is no I2C peripheral on the requested pin or the pins mismatch null \
  // is returned.
  // The peripheral is attached to both the underlying hardware and to the TwoWire \
  // object calling this method.
  // If the underlying peripheral is already connected to an object it will first \
  // be disconnected.
  $rect <1,80,201,120>
  method Wiring::I2c I2c( arg int32 aSDA, arg int32 aSCL )
  {
    /* this should be overwritten in the board specific variant */
    aSDA;
    aSCL;
    throw "Unimplemented base class method";

  }
}

// Pin mapping on the STM23F746NG Discovery board
$rect <630,90,870,130>
$variant STM32F746
vclass Pins_STM32F746_DISCO : Wiring::PinsClass
{
  $rect <0,0,200,40>
  inherited method Init()
  {
    pins[0].attach( Wiring::Port.C, 7 );
    pins[1].attach( Wiring::Port.C, 6 );
    pins[2].attach( Wiring::Port.G, 6 );
    pins[3].attach( Wiring::Port.B, 4 );
    pins[4].attach( Wiring::Port.G, 7 );
    pins[5].attach( Wiring::Port.I, 0 );
    pins[6].attach( Wiring::Port.H, 6 );
    pins[7].attach( Wiring::Port.I, 3 );
    pins[8].attach( Wiring::Port.I, 2 );
    pins[9].attach( Wiring::Port.A, 15 );
    pins[10].attach( Wiring::Port.A, 8 );
    pins[11].attach( Wiring::Port.B, 15 );
    pins[12].attach( Wiring::Port.B, 14 );
    pins[13].attach( Wiring::Port.I, 1 );
    pins[14].attach( Wiring::Port.B, 9 );
    pins[15].attach( Wiring::Port.B, 8 );
    pins[16].attach( Wiring::Port.A, 0 );
    pins[17].attach( Wiring::Port.F, 10 );
    pins[18].attach( Wiring::Port.F, 9 );
    pins[19].attach( Wiring::Port.F, 8 );
    pins[20].attach( Wiring::Port.F, 7 );
    pins[21].attach( Wiring::Port.F, 6 );

  }

  $rect <0,40,200,80>
  inherited method Pin()
  {
    if ( aPin >= 0 && aPin < pins.size )
      return pins[aPin];
    else
      return null;

  }

  $rect <0,80,200,120>
  inherited method Adc()
  {
    // adc is not implemented in the prototyper
    $if $prototyper
      aPin;
      return null;
    $endif

    $if !$prototyper
      var uint32 channel;
      switch (aPin)
      {
        case 16:
          native (channel)
          {
            channel = ADC_CHANNEL_0;
          }   
        case 17:
          native (channel)
          {
            channel = ADC_CHANNEL_8;
          }   
        case 18:
          native (channel)
          {
            channel = ADC_CHANNEL_7;
          }   
        case 19:
          native (channel)
          {
            channel = ADC_CHANNEL_6;
          }   
        case 20:
          native (channel)
          {
            channel = ADC_CHANNEL_5;
          }   
        case 21:
          native (channel)
          {
            channel = ADC_CHANNEL_4;
          }   
        default:
          return null;
      }

      if ( adc3 == null )
      {
        adc3 = new Wiring::Adc;
        var handle h;
        native (h)
        {
          h = (XHandle)ADC3;
          __HAL_RCC_ADC3_CLK_ENABLE();
        }
        adc3.instance = h;
      }
      adc3.channel = channel;
      return adc3;
    $endif

  }

  $rect <0,120,200,160>
  inherited method I2c()
  {
    $if $prototyper
      aSDA;
      aSCL;
    $endif

    $if !$prototyper
    // only pins 14 and 15 are valid for I²C on STM32F746 Discovery board
    if ( aSDA == 14 && aSCL == 15 )
    {
      if ( i2c1 == null )
      {
        i2c1 = new Wiring::I2c;
        var handle h;
        native ( h )
        {
          h = (XHandle)I2C1;
          __HAL_RCC_I2C1_CLK_ENABLE();
        }
        i2c1.SetInstance( h );
      }
      //pins[14].Mode = Wiring::PinModes.ALTERNATE_FUNCTION_OD;
      //pins[14].AlternateConnected = ^i2c1.Connected;
      //pins[15].Mode = Wiring::PinModes.ALTERNATE_FUNCTION_OD;
      //pins[15].AlternateConnected = ^i2c1.Connected;
      var int32 i2c_alternate;
      native ( i2c_alternate )
      {
        i2c_alternate = GPIO_AF4_I2C1;
      }
      pins[14].SetAlternateFunction( Wiring::PinModes.ALTERNATE_FUNCTION_OD, i2c_alternate, ^i2c1.Connected );
      pins[15].SetAlternateFunction( Wiring::PinModes.ALTERNATE_FUNCTION_OD, i2c_alternate, ^i2c1.Connected );
      i2c1.Connected = true;

      return i2c1;
    }
    $endif

    return null;

  }

  $rect <200,40,400,80>
  array Wiring::Pin pins[ 22 ] =
  (
    Default[0] = new Wiring::Pin;
    Default[1] = new Wiring::Pin;
    Default[2] = new Wiring::Pin;
    Default[3] = new Wiring::Pin;
    Default[4] = new Wiring::Pin;
    Default[5] = new Wiring::Pin;
    Default[6] = new Wiring::Pin;
    Default[7] = new Wiring::Pin;
    Default[8] = new Wiring::Pin;
    Default[9] = new Wiring::Pin;
    Default[10] = new Wiring::Pin;
    Default[11] = new Wiring::Pin;
    Default[12] = new Wiring::Pin;
    Default[13] = new Wiring::Pin;
    Default[14] = new Wiring::Pin;
    Default[15] = new Wiring::Pin;
    Default[16] = new Wiring::Pin;
    Default[17] = new Wiring::Pin;
    Default[18] = new Wiring::Pin;
    Default[19] = new Wiring::Pin;
    Default[20] = new Wiring::Pin;
    Default[21] = new Wiring::Pin;
  );

  $rect <200,80,400,120>
  var Wiring::Adc adc3 = null;

  $rect <200,120,400,160>
  var Wiring::I2c i2c1 = null;
}

$rect <430,130,630,170>
$output false
autoobject Wiring::PinsClass Pins;

// Enumeration of the possible pin states. Pin can be set to HIGH (resulting in a \
// logical 1 on the output), LOW (resulting a logical 0 on output) or UNDEFINED (this \
// has no effect on the output pin, and can appear when pin is routed to an alternate \
// function).
$rect <220,90,420,130>
$output false
enum PinState
{
  $rect <10,10,210,50>
  item UNDEFINED;

  $rect <10,50,210,90>
  item LOW;

  $rect <10,90,210,130>
  item HIGH;
}

$rect <430,190,630,230>
$output false
class Adc
{
  $rect <0,0,200,40>
  var handle instance = null;

  $rect <0,40,200,80>
  var uint32 channel = 0;

  // Perform a single conversion, waiting for the result and returning it;
  $rect <0,80,200,120>
  method uint16 ReadAdcValue( arg uint32 aResolution )
  {
    $if $prototyper
      aResolution;
      return 0;
    $endif

    $if !$prototyper
      if ( instance == null )
        return 0;

      var handle h = instance;
      var uint32 ch = channel;
      var uint16 res;
      
      native ( res, h, ch, aResolution )
      {
        // use default (zeroed) configuration everywhere
        ADC_HandleTypeDef AdcHandle = {};
        ADC_ChannelConfTypeDef AdcChannelConf = {};
        uint32_t c;

        AdcHandle.Instance = (ADC_TypeDef *)h;
        AdcHandle.Init.Resolution = aResolution;
        HAL_ADC_Init(&AdcHandle);

        AdcChannelConf.Channel = ch;
        AdcChannelConf.Rank = ADC_REGULAR_RANK_1;
        HAL_ADC_ConfigChannel( &AdcHandle, &AdcChannelConf );

        // start conversion
        HAL_ADC_Start(&AdcHandle);
        // and wait for finish it, it is not really healthy to do busy waiting in the GUI thread,
        // but we mimic the simple and inefficient Arduino routines
        HAL_ADC_PollForConversion( &AdcHandle, 10 );
        // polling could also end for some unforeseen reasons, so only continue if it terminated
        // at end-of-conversion
        c = HAL_ADC_GetState( &AdcHandle );
        if ( ( c & HAL_ADC_STATE_REG_EOC ) == HAL_ADC_STATE_REG_EOC )
        {
          res = HAL_ADC_GetValue( &AdcHandle );
        }
        // another rather inefficient Arduino handling, we start every conversion from initial setup
        // so in the end we also break down the setup
        HAL_ADC_Stop( &AdcHandle );
        HAL_ADC_DeInit( &AdcHandle );
      }
      return res;
    $endif
  }
}

// This is a wrapper class for the STM32F7 built-in true random number generator.
$rect <430,270,630,310>
$output false
class RandomNumberGenerator
{
  $rect <0,40,200,80>
  inherited method Done()
  {
    // on platform DeInit RNG hardware
    $if !$prototyper
      var handle h = rng;
      native (h)
      {
        __HAL_RCC_RNG_CLK_DISABLE();
        HAL_RNG_DeInit( (RNG_HandleTypeDef *)h );
      }
    $endif

  }

  $rect <0,0,200,40>
  inherited method Init()
  {
    // on the platform initialize the RNG hardware
    $if !$prototyper
      var handle h;
      native ( h )
      {
        static RNG_HandleTypeDef rngHandle = {};
        __HAL_RCC_RNG_CLK_ENABLE();


        rngHandle.Instance = RNG;
        HAL_RNG_Init( &rngHandle );

        //

        h = (XHandle)&rngHandle;
      }
      rng = h;
    $endif

  }

  $rect <200,0,400,40>
  var handle rng;

  $rect <0,80,240,120>
  method uint32 GenerateRandomNumber()
  {
    // in the prototyper use the built-in pseudo-random number generator
    $if $prototyper
      // the built in random number generator has a problem with range exceeding 32767
      // so build the full 32 bit unsigned random number out of 4 random bytes
      return ( (uint32)math_rand(0, 255) << 24 ) |
             ( (uint32)math_rand(0, 255) << 16 ) |
             ( (uint32)math_rand(0, 255) << 8 ) |
               (uint32)math_rand(0, 255);
    $endif

    // on the platform use the RNG hardware instead
    $if !$prototyper
      var uint32 res;
      var handle h = rng;
      native ( res, h )
      {
        HAL_RNG_GenerateRandomNumber( (RNG_HandleTypeDef *)h, &res );
      }        
      return res;
    $endif

  }
}

// The TwoWire module offers access to the Two-Wire Interface of the microcontroller.
$rect <10,90,210,130>
$output false
class TwoWire
{
  // Two-Wire Interface base commands
  note group Note
  {
    attr Bounds = <0,0,420,210>;
  }

  // Join the two-wire bus as a master.
  $rect <10,40,210,80>
  method void begin()
  {
    // attach to the I²C peripheral
    i2c = Wiring::Pins.I2c( SDA, SCL );

  }

  // Initiate a receiving aNumBytes of bytes from the slave device with address aAddress. 
  $rect <210,80,410,120>
  method int32 requestFrom( arg uint8 aAddress, arg uint8 aQuantity )
  {
    // this function is unimplemented on the prototyper
    $if $prototyper
      aAddress;
      aQuantity;
    $endif

    if ( i2c == null )
      return 0;

    // create an rxBuffer, read data from slave
    $if !$prototyper
      var handle buf = rxBuffer;
      native ( aQuantity, buf )
      {
        //uint8_t *data = (uint8_t *)buf;
        // if there was an rx buffer which was not emptied, release it
        if (buf)
          EwFree( (uint8_t *)buf );
        buf = (XHandle)EwAlloc( aQuantity );
      }
      rxBuffer = buf;
    $endif

    if ( i2c.masterRead( aAddress, rxBuffer, aQuantity ) )
      rxSize = aQuantity;
    else
      rxSize = 0;
    rxIndex = 0;

    return rxSize;
  }

  // Returns the number of bytes available for retrieval with read().
  $rect <210,120,410,160>
  method int32 available()
  {
    return rxSize - rxIndex;
  }

  // Read 1 byte of data from the slave device.
  $rect <210,160,410,200>
  method uint8 read()
  {
    if ( rxBuffer == null || rxIndex >= rxSize )
      return 0;

    var uint8 d = 0;

    $if !$prototyper
      var handle h = rxBuffer;
      var int32 i = rxIndex;
      native ( d, h, i )
      {
        d = *((uint8_t *)h + i);
      }
      rxIndex++;
      if ( rxIndex == rxSize )
      {
        native ( h )
        {
          EwFree( (uint8_t *)h );
        }
        rxBuffer = null;
        rxSize = 0;
        rxIndex = 0;
      }
    $endif

    return d;
  }

  // Start filling the transmission buffer specifying the target slave address.
  // 
  // Transmission buffer is filled with write command, and actual transmission is \
  // started with the endTransmission command.
  $rect <10,80,210,120>
  method void beginTransmission( arg uint8 aAddress )
  {
    slaveAddress = aAddress;
    txSize = 0;
  }

  // Finish a transmission in progress and release the bus.
  $rect <10,120,210,160>
  method bool endTransmission()
  {
    // fail if no i2c interface connected
    if ( i2c == null )
      return false;

    // address 0 for slave is reserved, so if no proper address is given do not start
    // any transmission
    // also if there is no data avoid transmitting anything
    if ( slaveAddress == 0 || txSize == 0 )
      return false;

    // only initiate data transmission on target
    var handle buf = null;
    $if !$prototyper
    native( buf )
    {
      buf = (XHandle)_this->txBuffer;
    }
    $endif
    return i2c.masterWrite( slaveAddress, buf, (uint16)txSize );  

  }

  // Send 1 byte of data on the TWI bus.
  $rect <10,160,210,200>
  method int32 write( arg uint8 aData )
  {
    if ( txSize < txBuffer.size )
    {
      txBuffer[txSize] = aData;
      txSize++;
      return 1;
    }
    else
      return 0;

  }

  // Module properties
  note group Note1
  {
    attr Bounds = <430,0,850,210>;
  }

  // Select the pin for SDA line.
  $rect <440,80,640,120>
  property int32 SDA = 14;

  $rect <440,120,640,160>
  onset SDA
  {
    // The value doesn't change - nothing to do.
    if ( pure SDA == value )
      return;

    // Remember the property's new value.
    pure SDA = value;

    // TO DO:
    // 
    // Now you can handle the alternation of the property.
  }

  // Select pin for SCL line.
  $rect <640,80,840,120>
  property int32 SCL = 15;

  $rect <640,120,840,160>
  onset SCL
  {
    // The value doesn't change - nothing to do.
    if ( pure SCL == value )
      return;

    // Remember the property's new value.
    pure SCL = value;

    // TO DO:
    // 
    // Now you can handle the alternation of the property.
  }

  $rect <10,280,210,320>
  var Wiring::I2c i2c = null;

  // Internal variables
  note group Note2
  {
    attr Bounds = <0,230,630,450>;
  }

  $rect <210,280,410,320>
  var handle rxBuffer = null;

  $rect <210,320,410,360>
  var int32 rxSize = 0;

  $rect <210,360,410,400>
  var int32 rxIndex = 0;

  $rect <410,360,610,400>
  var uint8 slaveAddress = 0;

  $rect <410,280,610,320>
  array uint8 txBuffer[ 32 ];

  $rect <410,320,610,360>
  var int32 txSize;

  $rect <410,400,610,440>
  method handle txBufferHandle()
  {
    $if !$prototyper
      var handle h;
      native ( h )
      {
        h = (XHandle)_this->txBuffer;
      }
      return h;
    $else
      return null;
    $endif
  }

  $rect <10,400,210,440>
  slot detachPin
  {
    sender; /* the method is called from the sender object */
  }
}

$rect <430,230,630,270>
$output false
class I2c
{
  $rect <0,40,200,80>
  inherited method Done()
  {
    $if !$prototyper
    var handle h = handle;
    native( h )
    {
      HAL_I2C_DeInit( (I2C_HandleTypeDef *)h );
      EwFree( (I2C_HandleTypeDef *)h );
    }
    $endif

  }

  $rect <0,0,200,40>
  inherited method Init()
  {
    $if !$prototyper
    var handle h;
    native( h )
    {
      h = (XHandle)EwAlloc( sizeof(I2C_HandleTypeDef) );
      EwZero( (void *)h, sizeof(I2C_HandleTypeDef) );
    }
    handle = h;
    $endif

  }

  $rect <200,100,400,140>
  var handle handle;

  $rect <0,140,200,180>
  method bool masterWrite( arg uint8 aAddress, arg handle aData, arg uint16 aSize )
  {
    $if $prototyper
      // unimplemented in the prototyper
      aAddress;
      aData;
      aSize;

      return false;
    $endif

    $if !$prototyper
      var handle h = handle;
      var bool res = false;
      var int32 code;

      native( h, aAddress, aData, aSize, code )
      {
        // right now use only 7 bit addresses
        // address has to be left aligned
        aAddress <<= 1;
        if ( HAL_I2C_Master_Transmit( (I2C_HandleTypeDef *)h, aAddress, (uint8_t *)aData, aSize, 1 ) == HAL_OK )
          res = 1;

        code = ((I2C_HandleTypeDef *)h)->ErrorCode;
      }

      return res;
    $endif
  }

  $rect <0,180,200,220>
  method bool masterRead( arg uint8 aAddress, arg handle aData, arg uint16 aSize )
  {
    $if $prototyper
      // unimplemented in the prototyper
      aAddress;
      aData;
      aSize;

    $endif
    if ( aData == null || aSize == 0 )
      return false;

    var bool res = false;

    $if !$prototyper
      var handle h = handle;

      native( h, aAddress, aData, aSize, res )
      {
        // right now use only 7 bit addresses
        // address has to be left aligned
        aAddress <<= 1;
        if ( HAL_I2C_Master_Receive( (I2C_HandleTypeDef *)h, aAddress, (uint8_t *)aData, aSize, 1 ) == HAL_OK )
          res = 1;
      }
    $endif

    return res;
  }

  // This function is used by the Pins interface to find and attach the corresponding \
  // I2C peripheral to this object.
  $rect <200,0,400,40>
  method void SetInstance( arg handle aInstance )
  {
    $if !$prototyper
    var handle h = handle;
    native ( aInstance, h )
    {
      ((I2C_HandleTypeDef *)h)->Instance = (I2C_TypeDef *)aInstance;
    }
    $endif
  }

  $rect <400,0,600,40>
  property bool Connected = false;

  $rect <400,40,600,80>
  onset Connected
  {
    // The value doesn't change - nothing to do.
    if ( pure Connected == value )
      return;

    // Remember the property's new value.
    pure Connected = value;

    // if module disconnected from the pins, notify drivers using this
    if ( !value )
    {
      notifyobservers ^Connected;
      // also deinit the handle
     $if !$prototyper
      var handle h = handle;
      native( h )
      {
        HAL_I2C_DeInit( (I2C_HandleTypeDef *)h );
      }
    }
    else
    {
      // when connected, also init the handle
      // right now hardcoded to master 7bit addressing mode, 100kHz clock
      var handle h = handle;
      native( h )
      {
        I2C_HandleTypeDef *handle = (I2C_HandleTypeDef *)h;

        handle->Init.Timing = 0x40912732ul;
        handle->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
        handle->Mode = HAL_I2C_MODE_MASTER;

        HAL_I2C_Init( handle );
      }
    $endif
    }
  }
}
